/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.hedhman.pony.idea.generated.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.hedhman.pony.idea.generated.parsing.PonyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_PonyLexer.flex</tt>
 */
public class _PonyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1"+
    "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5"+
    "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1"+
    "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1"+
    "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13"+
    "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1"+
    "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170"+
    "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2"+
    "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1"+
    "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150"+
    "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2"+
    "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123"+
    "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207"+
    "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40"+
    "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46"+
    "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202"+
    "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13"+
    "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13"+
    "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1"+
    "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40"+
    "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27"+
    "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40"+
    "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4"+
    "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1"+
    "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110"+
    "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250"+
    "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1"+
    "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256"+
    "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55"+
    "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1"+
    "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1"+
    "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1"+
    "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75"+
    "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265"+
    "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1"+
    "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1"+
    "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277"+
    "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13"+
    "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\0\1\13\1\55\3\0\1\11\1\21\1\0\1\15\2\0\1"+
    "\23\1\6\1\14\12\5\6\0\1\52\4\20\1\7\25\20\1\22\1\12\2\0\1\16\1\0\1\37\1\34"+
    "\1\41\1\51\1\10\1\31\1\54\1\26\1\27\1\46\1\40\1\45\1\47\1\33\1\42\1\44\1\20"+
    "\1\36\1\30\1\25\1\32\1\50\1\35\1\53\1\43\1\20\3\0\1\24\6\0\1\1\12\0\1\4\11"+
    "\0\1\17\12\0\1\17\4\0\1\17\5\0\27\17\1\0\12\17\4\0\14\17\16\0\5\17\7\0\1\17"+
    "\1\0\1\17\1\0\5\17\1\0\2\17\2\0\4\17\1\0\1\17\6\0\1\17\1\0\3\17\1\0\1\17\1"+
    "\0\4\17\1\0\23\17\1\0\13\17\10\0\6\17\1\0\26\17\2\0\1\17\6\0\10\17\10\0\13"+
    "\17\5\0\3\17\33\0\6\17\1\0\1\17\17\0\2\17\7\0\2\17\12\0\3\17\2\0\2\17\1\0"+
    "\16\17\15\0\11\17\13\0\1\17\30\0\6\17\4\0\2\17\4\0\1\17\5\0\6\17\4\0\1\17"+
    "\11\0\1\17\3\0\1\17\7\0\11\17\7\0\5\17\1\0\10\17\6\0\26\17\3\0\1\17\2\0\1"+
    "\17\7\0\11\17\4\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0\1\17\3\0\4\17\3\0"+
    "\1\17\20\0\1\17\15\0\2\17\1\0\1\17\5\0\6\17\4\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\2\17\17\0\4\17\1\0\1\17\3\0\3\17\20\0\11\17\1\0\2\17\1\0\2\17\1\0\5\17\3"+
    "\0\1\17\2\0\1\17\30\0\1\17\13\0\10\17\2\0\1\17\3\0\1\17\1\0\6\17\3\0\3\17"+
    "\1\0\4\17\3\0\2\17\1\0\1\17\1\0\2\17\3\0\2\17\3\0\3\17\3\0\14\17\13\0\10\17"+
    "\1\0\2\17\10\0\3\17\5\0\1\17\4\0\10\17\1\0\6\17\1\0\5\17\3\0\1\17\3\0\2\17"+
    "\15\0\13\17\2\0\1\17\6\0\3\17\10\0\1\17\5\0\22\17\3\0\10\17\1\0\11\17\1\0"+
    "\1\17\2\0\7\17\11\0\1\17\1\0\2\17\15\0\2\17\1\0\1\17\2\0\2\17\1\0\1\17\2\0"+
    "\1\17\6\0\4\17\1\0\7\17\1\0\3\17\1\0\1\17\1\0\1\17\2\0\2\17\1\0\4\17\1\0\2"+
    "\17\11\0\1\17\2\0\5\17\1\0\1\17\25\0\14\17\1\0\24\17\13\0\5\17\22\0\7\17\4"+
    "\0\4\17\3\0\1\17\3\0\2\17\7\0\3\17\4\0\15\17\14\0\1\17\1\0\6\17\1\0\1\17\5"+
    "\0\1\17\2\0\13\17\1\0\15\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0\1\17\1"+
    "\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0\16\17\2\0\6\17\2\0\15\17\2\0\1\17\1"+
    "\4\17\17\1\0\10\17\7\0\15\17\1\0\6\17\23\0\1\17\4\0\1\17\3\0\5\17\2\0\22\17"+
    "\1\0\1\17\5\0\17\17\1\0\16\17\2\0\5\17\13\0\14\17\13\0\1\17\15\0\7\17\7\0"+
    "\16\17\15\0\2\17\11\0\4\17\1\0\4\17\3\0\2\17\11\0\10\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\6\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0\7\17\3\0\4\17\2\0\6\17\4"+
    "\0\13\4\15\0\2\1\5\0\1\4\17\0\1\4\1\0\1\17\15\0\1\17\2\0\1\17\4\0\1\17\2\0"+
    "\12\17\1\0\1\17\3\0\5\17\6\0\1\17\1\0\1\17\1\0\1\17\1\0\4\17\1\0\13\17\2\0"+
    "\4\17\5\0\5\17\4\0\1\17\4\0\2\17\13\0\5\17\6\0\4\17\3\0\2\17\14\0\10\17\7"+
    "\0\10\17\1\0\7\17\1\0\1\4\4\0\2\17\12\0\5\17\5\0\2\17\3\0\7\17\6\0\3\17\12"+
    "\0\2\17\13\0\11\17\2\0\27\17\2\0\7\17\1\0\3\17\1\0\4\17\1\0\4\17\2\0\6\17"+
    "\3\0\1\17\1\0\1\17\2\0\5\17\1\0\12\17\12\0\5\17\1\0\3\17\1\0\10\17\4\0\7\17"+
    "\3\0\1\17\3\0\2\17\1\0\1\17\3\0\2\17\2\0\5\17\2\0\1\17\1\0\1\17\30\0\3\17"+
    "\3\0\6\17\2\0\6\17\2\0\6\17\11\0\7\17\4\0\5\17\3\0\5\17\5\0\1\17\1\0\10\17"+
    "\1\0\5\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0\12\17\6\0\12\17\2\0\6\17\2\0\6\17"+
    "\2\0\6\17\2\0\3\17\3\0\14\17\1\0\16\17\1\0\2\17\1\0\2\17\1\0\10\17\6\0\4\17"+
    "\4\0\16\17\2\0\1\17\1\0\14\17\1\0\2\17\3\0\1\17\2\0\4\17\1\0\2\17\12\0\10"+
    "\17\6\0\6\17\1\0\3\17\1\0\12\17\3\0\1\17\12\0\4\17\25\0\1\17\1\0\1\17\3\0"+
    "\7\17\1\0\1\17\1\0\4\17\1\0\17\17\1\0\2\17\14\0\3\17\7\0\4\17\11\0\2\17\1"+
    "\0\1\17\20\0\4\17\10\0\1\17\13\0\10\17\5\0\3\17\2\0\1\17\2\0\2\17\2\0\4\17"+
    "\1\0\14\17\1\0\1\17\1\0\7\17\1\0\21\17\1\0\4\17\2\0\10\17\1\0\7\17\1\0\14"+
    "\17\1\0\4\17\1\0\5\17\1\0\1\17\3\0\14\17\2\0\10\17\1\0\2\17\1\0\1\17\2\0\1"+
    "\17\1\0\12\17\1\0\4\17\1\0\1\17\1\0\1\17\6\0\1\17\4\0\1\17\1\0\1\17\1\0\1"+
    "\17\1\0\3\17\1\0\2\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\2\17\1\0\1\17\2\0\4\17\1\0\7\17\1\0\4\17\1\0\4\17\1\0\1\17\1\0\12\17"+
    "\1\0\5\17\1\0\3\17\1\0\5\17\1\0\5\17");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\2\4\3\1\22\4\1\5"+
    "\1\4\1\6\1\7\1\10\1\11\2\12\1\0\4\4"+
    "\1\0\1\13\3\0\1\14\1\0\5\4\1\15\1\16"+
    "\1\17\10\4\1\20\5\4\1\21\6\4\1\22\5\4"+
    "\1\23\1\4\3\0\1\24\1\12\1\25\3\4\1\0"+
    "\4\4\1\26\1\4\1\27\1\30\2\4\1\31\4\4"+
    "\1\32\1\4\1\33\1\34\1\4\1\35\1\36\1\4"+
    "\1\37\4\4\1\40\2\4\1\41\7\4\1\42\1\4"+
    "\1\43\1\44\1\4\1\45\5\0\1\4\1\46\1\4"+
    "\1\47\1\4\1\50\1\51\1\52\1\4\1\53\1\54"+
    "\11\4\1\55\15\4\3\0\1\56\1\0\1\57\1\4"+
    "\1\60\1\61\1\62\1\4\1\63\2\4\1\64\1\65"+
    "\1\66\1\67\1\70\3\4\1\71\4\4\1\72\2\4"+
    "\1\73\1\4\1\74\1\0\1\75\1\0\1\76\1\77"+
    "\1\4\1\100\1\101\1\4\1\102\4\4\1\103\2\4"+
    "\1\104\1\105\1\4\1\106\2\4\1\107\5\4\1\110"+
    "\2\4\1\111\1\112\1\113\2\4\1\114\6\4\1\115"+
    "\4\4\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\56\0\u0536\0\u0564"+
    "\0\56\0\56\0\u0592\0\u05c0\0\56\0\u05ee\0\u061c\0\u064a"+
    "\0\u0678\0\u06a6\0\u0170\0\56\0\u06d4\0\u019e\0\u0702\0\u0730"+
    "\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0"+
    "\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0114\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0114"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0114\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0114\0\u0d4c\0\u0d7a\0\u0da8"+
    "\0\u0dd6\0\56\0\u05ee\0\u0114\0\u0e04\0\u0e32\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0114\0\u0f74\0\u0114\0\u0114"+
    "\0\u0fa2\0\u0fd0\0\u0114\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u0114"+
    "\0\u10b6\0\u0114\0\u0114\0\u10e4\0\u0114\0\u0114\0\u1112\0\u0114"+
    "\0\u1140\0\u116e\0\u119c\0\u11ca\0\u0114\0\u11f8\0\u1226\0\u0114"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u0114"+
    "\0\u1396\0\u0114\0\u0114\0\u13c4\0\u0114\0\u13f2\0\u1420\0\u144e"+
    "\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\56\0\u1562\0\u0114"+
    "\0\u0114\0\u0114\0\u1590\0\u0114\0\u0114\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u0114\0\u175c"+
    "\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc"+
    "\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\56"+
    "\0\u1a3c\0\u0114\0\u1a6a\0\u0114\0\u0114\0\u0114\0\u1a98\0\u0114"+
    "\0\u1ac6\0\u1af4\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u1b22"+
    "\0\u1b50\0\u1b7e\0\u0114\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u0114"+
    "\0\u1c64\0\u1c92\0\u0114\0\u1cc0\0\56\0\u1cee\0\56\0\u1d1c"+
    "\0\u0114\0\u0114\0\u1d4a\0\u0114\0\u0114\0\u1d78\0\u0114\0\u1da6"+
    "\0\u1dd4\0\u1e02\0\u1e30\0\u0114\0\u1e5e\0\u1e8c\0\56\0\56"+
    "\0\u1eba\0\u0114\0\u1ee8\0\u1f16\0\u0114\0\u1f44\0\u1f72\0\u1fa0"+
    "\0\u1fce\0\u1ffc\0\u0114\0\u202a\0\u2058\0\u0114\0\u0114\0\u0114"+
    "\0\u2086\0\u20b4\0\u0114\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a"+
    "\0\u21c8\0\u0114\0\u21f6\0\u2224\0\u2252\0\u2280\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\2\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\2\1\14\2\7"+
    "\4\2\1\15\1\7\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\7\1\27\1\30\1\7"+
    "\1\31\1\32\1\7\1\33\1\34\1\35\1\36\1\37"+
    "\1\7\1\40\57\0\4\3\52\0\4\3\14\0\1\41"+
    "\1\42\1\43\33\0\1\3\1\4\2\3\14\0\1\41"+
    "\1\42\1\43\37\0\1\6\1\44\1\45\1\46\52\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\25\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\6\7\1\47\2\7\1\50"+
    "\6\7\1\51\1\7\1\52\2\7\1\0\2\7\1\0"+
    "\11\53\1\54\1\55\43\53\12\56\1\57\1\54\42\56"+
    "\14\0\1\60\1\61\45\0\1\7\1\0\3\7\4\0"+
    "\1\62\1\0\1\7\4\0\25\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\1\7\1\63\7\7\1\64\1\65\3\7\1\66\6\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\3\7\1\67\1\70\1\7\1\71"+
    "\16\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\1\72\24\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\5\7\1\73\4\7\1\74\2\7\1\75\7\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\3\7\1\76\2\7\1\77\16\7"+
    "\1\0\2\7\6\0\1\7\1\0\1\7\1\100\1\7"+
    "\4\0\1\7\1\0\1\7\4\0\15\7\1\101\7\7"+
    "\1\0\2\7\6\0\1\7\1\0\1\7\1\102\1\7"+
    "\4\0\1\7\1\0\1\7\4\0\11\7\1\103\3\7"+
    "\1\104\7\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\1\7\1\105\1\106"+
    "\22\7\1\0\2\7\6\0\1\7\1\0\1\7\1\107"+
    "\1\7\4\0\1\7\1\0\1\7\4\0\25\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\3\7\1\110\2\7\1\111\5\7\1\112"+
    "\7\7\1\113\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\15\7\1\114\2\7"+
    "\1\115\4\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\7\7\1\116\1\7"+
    "\1\117\13\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\11\7\1\120\13\7"+
    "\1\0\2\7\6\0\1\7\1\0\1\7\1\121\1\7"+
    "\4\0\1\7\1\0\1\7\4\0\25\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\12\7\1\122\12\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\12\7"+
    "\1\123\12\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\2\7\1\124\12\7"+
    "\1\125\7\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\15\7\1\126\7\7"+
    "\1\0\2\7\31\0\1\127\5\0\1\130\1\131\42\0"+
    "\1\132\36\0\1\44\1\0\1\45\1\46\52\0\1\133"+
    "\55\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\24\7\1\134\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\11\7\1\135"+
    "\13\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\3\7\1\136\21\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\7\7\1\137\15\7\1\0\2\7\1\0"+
    "\1\53\3\0\52\53\1\56\3\0\52\56\1\60\3\0"+
    "\52\60\15\61\1\140\40\61\5\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\20\7\1\141\4\7"+
    "\1\0\2\7\6\0\1\7\1\0\1\7\1\142\1\7"+
    "\4\0\1\7\1\0\1\7\4\0\2\7\1\143\22\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\5\7\1\144\1\145\3\7\1\146"+
    "\3\7\1\147\6\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\25\7\1\0"+
    "\1\7\1\150\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\17\7\1\151\5\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\6\7\1\152\6\7\1\153\7\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\1\154\23\7\1\155\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\1\156"+
    "\24\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\11\7\1\157\13\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\6\7\1\160\16\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\20\7\1\161\4\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\11\7\1\162"+
    "\13\7\1\0\2\7\6\0\1\7\1\0\1\7\1\163"+
    "\1\7\4\0\1\7\1\0\1\7\4\0\25\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\1\164\24\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\10\7"+
    "\1\165\14\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\1\166\24\7\1\0"+
    "\2\7\6\0\1\7\1\0\1\7\1\167\1\7\4\0"+
    "\1\7\1\0\1\7\4\0\25\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\25\7\1\0\1\170\1\7\6\0\1\7\1\0\1\7"+
    "\1\171\1\7\4\0\1\7\1\0\1\7\4\0\2\7"+
    "\1\172\22\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\1\173\24\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\1\174\3\7\1\175\7\7\1\176\2\7"+
    "\1\177\5\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\24\7\1\200\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\1\201\24\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\24\7"+
    "\1\202\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\6\7\1\203\13\7\1\204"+
    "\2\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\12\7\1\205\12\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\21\7\1\206\3\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\2\7\1\207\22\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\1\210\24\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\1\211\24\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\11\7\1\212\6\7\1\213\4\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\25\7\1\0\1\7\1\214\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\11\7\1\215\13\7"+
    "\1\0\2\7\11\0\1\216\15\0\1\217\37\0\1\220"+
    "\100\0\1\221\11\0\1\222\15\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\15\7\1\223\7\7"+
    "\1\0\2\7\6\0\1\7\1\0\1\7\1\224\1\7"+
    "\4\0\1\7\1\0\1\7\4\0\25\7\1\0\2\7"+
    "\6\0\1\7\1\0\1\7\1\225\1\7\4\0\1\7"+
    "\1\0\1\7\4\0\25\7\1\0\2\7\1\0\14\61"+
    "\1\226\1\140\40\61\5\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\15\7\1\227\7\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\6\7\1\230\16\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\3\7\1\231\21\7\1\0\2\7\6\0\1\7\1\0"+
    "\1\7\1\232\1\7\4\0\1\7\1\0\1\7\4\0"+
    "\25\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\2\7\1\233\22\7\1\0"+
    "\2\7\6\0\1\7\1\0\1\7\1\234\1\7\4\0"+
    "\1\7\1\0\1\7\4\0\25\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\1\235\24\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\16\7\1\236\6\7"+
    "\1\0\2\7\6\0\1\7\1\0\1\7\1\237\1\7"+
    "\4\0\1\7\1\0\1\7\4\0\25\7\1\0\2\7"+
    "\6\0\1\7\1\0\1\7\1\240\1\7\4\0\1\7"+
    "\1\0\1\7\4\0\25\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\5\7"+
    "\1\241\17\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\3\7\1\242\21\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\2\7\1\243\22\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\12\7\1\244\12\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\11\7"+
    "\1\245\13\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\20\7\1\246\4\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\1\7\1\247\23\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\5\7\1\250\17\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\15\7"+
    "\1\251\7\7\1\0\2\7\6\0\1\7\1\0\1\7"+
    "\1\252\1\7\4\0\1\7\1\0\1\7\4\0\25\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\15\7\1\253\7\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\11\7\1\254\13\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\1\255"+
    "\2\7\1\256\21\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\17\7\1\257"+
    "\5\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\3\7\1\260\21\7\1\0"+
    "\2\7\6\0\1\7\1\0\1\7\1\261\1\7\4\0"+
    "\1\7\1\0\1\7\4\0\25\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\22\7\1\262\2\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\14\7\1\263"+
    "\10\7\1\0\2\7\6\0\1\7\1\0\1\7\1\264"+
    "\1\7\4\0\1\7\1\0\1\7\4\0\25\7\1\0"+
    "\2\7\34\0\1\265\61\0\1\266\55\0\1\267\61\0"+
    "\1\270\41\0\1\271\33\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\11\7\1\272\13\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\2\7\1\273\22\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\24\7\1\274\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\14\7\1\275\10\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\1\276\24\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\17\7\1\277\5\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\4\7\1\300"+
    "\20\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\11\7\1\301\13\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\14\7\1\302\10\7\1\0\2\7\6\0"+
    "\1\7\1\0\1\7\1\303\1\7\4\0\1\7\1\0"+
    "\1\7\4\0\25\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\20\7\1\304"+
    "\4\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\13\7\1\305\11\7\1\0"+
    "\2\7\6\0\1\7\1\0\1\7\1\306\1\7\4\0"+
    "\1\7\1\0\1\7\4\0\25\7\1\0\2\7\6\0"+
    "\1\7\1\0\1\7\1\307\1\7\4\0\1\7\1\0"+
    "\1\7\4\0\25\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\11\7\1\310"+
    "\13\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\23\7\1\311\1\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\12\7\1\312\12\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\11\7\1\313\13\7\1\0\2\7\6\0\1\7\1\0"+
    "\1\7\1\314\1\7\4\0\1\7\1\0\1\7\4\0"+
    "\25\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\2\7\1\315\22\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\5\7\1\316\17\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\2\7\1\317\22\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\3\7\1\320"+
    "\21\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\14\7\1\321\10\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\2\7\1\322\22\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\1\7\1\323\23\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\3\7\1\324"+
    "\21\7\1\0\2\7\52\0\1\325\42\0\1\326\70\0"+
    "\1\327\43\0\1\330\23\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\4\7\1\331\20\7\1\0"+
    "\2\7\6\0\1\7\1\0\1\7\1\332\1\7\4\0"+
    "\1\7\1\0\1\7\4\0\25\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\4\7\1\333\20\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\1\334\24\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\6\7\1\335\16\7\1\0\2\7"+
    "\6\0\1\7\1\0\1\7\1\336\1\7\4\0\1\7"+
    "\1\0\1\7\4\0\25\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\1\337"+
    "\24\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\3\7\1\340\21\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\6\7\1\341\16\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\22\7\1\342\2\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\20\7\1\343"+
    "\4\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\1\344\24\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\1\345\24\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\1\346\24\7"+
    "\1\0\2\7\11\0\1\347\75\0\1\350\32\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\12\7"+
    "\1\351\12\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\11\7\1\352\13\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\3\7\1\353\21\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\5\7\1\354\17\7\1\0\2\7\6\0\1\7"+
    "\1\0\1\7\1\355\1\7\4\0\1\7\1\0\1\7"+
    "\4\0\25\7\1\0\2\7\6\0\1\7\1\0\1\7"+
    "\1\356\1\7\4\0\1\7\1\0\1\7\4\0\25\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\2\7\1\357\22\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\15\7\1\360\7\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\14\7"+
    "\1\361\10\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\15\7\1\362\7\7"+
    "\1\0\2\7\6\0\1\7\1\0\1\7\1\363\1\7"+
    "\4\0\1\7\1\0\1\7\4\0\25\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\364\1\0\1\7"+
    "\4\0\25\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\23\7\1\365\1\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\4\7\1\366\20\7\1\0\2\7"+
    "\6\0\1\7\1\0\1\7\1\367\1\7\4\0\1\7"+
    "\1\0\1\7\4\0\25\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\4\7"+
    "\1\370\20\7\1\0\2\7\6\0\1\7\1\0\1\7"+
    "\1\371\1\7\4\0\1\7\1\0\1\7\4\0\2\7"+
    "\1\372\22\7\1\0\2\7\6\0\1\7\1\0\1\7"+
    "\1\373\1\7\4\0\1\7\1\0\1\7\4\0\25\7"+
    "\1\0\2\7\6\0\1\7\1\0\3\7\4\0\1\7"+
    "\1\0\1\7\4\0\11\7\1\374\13\7\1\0\2\7"+
    "\6\0\1\7\1\0\3\7\4\0\1\7\1\0\1\7"+
    "\4\0\6\7\1\375\16\7\1\0\2\7\6\0\1\7"+
    "\1\0\3\7\4\0\1\7\1\0\1\7\4\0\11\7"+
    "\1\376\13\7\1\0\2\7\6\0\1\7\1\0\3\7"+
    "\4\0\1\7\1\0\1\7\4\0\1\377\24\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\15\7\1\u0100\7\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\11\7\1\u0101\13\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\11\7\1\u0102"+
    "\13\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\2\7\1\u0103\22\7\1\0"+
    "\2\7\6\0\1\7\1\0\3\7\4\0\1\7\1\0"+
    "\1\7\4\0\6\7\1\u0104\16\7\1\0\2\7\6\0"+
    "\1\7\1\0\3\7\4\0\1\7\1\0\1\7\4\0"+
    "\3\7\1\u0105\21\7\1\0\2\7\6\0\1\7\1\0"+
    "\3\7\4\0\1\7\1\0\1\7\4\0\2\7\1\u0106"+
    "\22\7\1\0\2\7\6\0\1\7\1\0\3\7\4\0"+
    "\1\7\1\0\1\7\4\0\14\7\1\u0107\10\7\1\0"+
    "\2\7\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8878];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\0\4\1\1\0\1\11\3\0\1\1\1\0\45\1"+
    "\3\0\1\11\5\1\1\0\55\1\5\0\3\1\1\11"+
    "\36\1\3\0\1\11\1\0\33\1\1\11\1\0\1\11"+
    "\1\0\16\1\2\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _PonyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PonyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 79: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 80: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 81: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 82: break;
          case 5: 
            { return FFI_CHAR;
            } 
            // fall through
          case 83: break;
          case 6: 
            { return HASH;
            } 
            // fall through
          case 84: break;
          case 7: 
            { return LPAREN_NEW;
            } 
            // fall through
          case 85: break;
          case 8: 
            { return LSQUARE_NEW;
            } 
            // fall through
          case 86: break;
          case 9: 
            { return MINUS_NEW;
            } 
            // fall through
          case 87: break;
          case 10: 
            { return FLOAT;
            } 
            // fall through
          case 88: break;
          case 11: 
            { return STRING;
            } 
            // fall through
          case 89: break;
          case 12: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 90: break;
          case 13: 
            { return IS;
            } 
            // fall through
          case 91: break;
          case 14: 
            { return IF;
            } 
            // fall through
          case 92: break;
          case 15: 
            { return IN;
            } 
            // fall through
          case 93: break;
          case 16: 
            { return BE;
            } 
            // fall through
          case 94: break;
          case 17: 
            { return AS;
            } 
            // fall through
          case 95: break;
          case 18: 
            { return OR;
            } 
            // fall through
          case 96: break;
          case 19: 
            { return DO;
            } 
            // fall through
          case 97: break;
          case 20: 
            { return MINUS_TILDE_NEW;
            } 
            // fall through
          case 98: break;
          case 21: 
            { return END;
            } 
            // fall through
          case 99: break;
          case 22: 
            { return TRN;
            } 
            // fall through
          case 100: break;
          case 23: 
            { return TRY;
            } 
            // fall through
          case 101: break;
          case 24: 
            { return TAG;
            } 
            // fall through
          case 102: break;
          case 25: 
            { return ISO;
            } 
            // fall through
          case 103: break;
          case 26: 
            { return FUN;
            } 
            // fall through
          case 104: break;
          case 27: 
            { return FOR;
            } 
            // fall through
          case 105: break;
          case 28: 
            { return USE;
            } 
            // fall through
          case 106: break;
          case 29: 
            { return NEW;
            } 
            // fall through
          case 107: break;
          case 30: 
            { return NOT;
            } 
            // fall through
          case 108: break;
          case 31: 
            { return BOX;
            } 
            // fall through
          case 109: break;
          case 32: 
            { return REF;
            } 
            // fall through
          case 110: break;
          case 33: 
            { return AND;
            } 
            // fall through
          case 111: break;
          case 34: 
            { return LET;
            } 
            // fall through
          case 112: break;
          case 35: 
            { return VAR;
            } 
            // fall through
          case 113: break;
          case 36: 
            { return VAL;
            } 
            // fall through
          case 114: break;
          case 37: 
            { return XOR;
            } 
            // fall through
          case 115: break;
          case 38: 
            { return ELSE;
            } 
            // fall through
          case 116: break;
          case 39: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 117: break;
          case 40: 
            { return THEN;
            } 
            // fall through
          case 118: break;
          case 41: 
            { return THIS;
            } 
            // fall through
          case 119: break;
          case 42: 
            { return TRUE;
            } 
            // fall through
          case 120: break;
          case 43: 
            { return TYPE;
            } 
            // fall through
          case 121: break;
          case 44: 
            { return ISNT;
            } 
            // fall through
          case 122: break;
          case 45: 
            { return WITH;
            } 
            // fall through
          case 123: break;
          case 46: 
            { return HASH_ANY;
            } 
            // fall through
          case 124: break;
          case 47: 
            { return ERROR;
            } 
            // fall through
          case 125: break;
          case 48: 
            { return EMBED;
            } 
            // fall through
          case 126: break;
          case 49: 
            { return LOC;
            } 
            // fall through
          case 127: break;
          case 50: 
            { return TRAIT;
            } 
            // fall through
          case 128: break;
          case 51: 
            { return IFDEF;
            } 
            // fall through
          case 129: break;
          case 52: 
            { return FALSE;
            } 
            // fall through
          case 130: break;
          case 53: 
            { return UNTIL;
            } 
            // fall through
          case 131: break;
          case 54: 
            { return BREAK;
            } 
            // fall through
          case 132: break;
          case 55: 
            { return WHERE;
            } 
            // fall through
          case 133: break;
          case 56: 
            { return WHILE;
            } 
            // fall through
          case 134: break;
          case 57: 
            { return ACTOR;
            } 
            // fall through
          case 135: break;
          case 58: 
            { return CLASS;
            } 
            // fall through
          case 136: break;
          case 59: 
            { return MATCH;
            } 
            // fall through
          case 137: break;
          case 60: 
            { return HASH_SEND;
            } 
            // fall through
          case 138: break;
          case 61: 
            { return HASH_READ;
            } 
            // fall through
          case 139: break;
          case 62: 
            { return ELSEIF;
            } 
            // fall through
          case 140: break;
          case 63: 
            { return IFTYPE;
            } 
            // fall through
          case 141: break;
          case 64: 
            { return STRUCT;
            } 
            // fall through
          case 142: break;
          case 65: 
            { return RETURN;
            } 
            // fall through
          case 143: break;
          case 66: 
            { return REPEAT;
            } 
            // fall through
          case 144: break;
          case 67: 
            { return OBJECT;
            } 
            // fall through
          case 145: break;
          case 68: 
            { return HASH_SHARE;
            } 
            // fall through
          case 146: break;
          case 69: 
            { return HASH_ALIAS;
            } 
            // fall through
          case 147: break;
          case 70: 
            { return RECOVER;
            } 
            // fall through
          case 148: break;
          case 71: 
            { return CONSUME;
            } 
            // fall through
          case 149: break;
          case 72: 
            { return CONTINUE;
            } 
            // fall through
          case 150: break;
          case 73: 
            { return DIGESTOF;
            } 
            // fall through
          case 151: break;
          case 74: 
            { return INTERFACE;
            } 
            // fall through
          case 152: break;
          case 75: 
            { return ADDRESSOF;
            } 
            // fall through
          case 153: break;
          case 76: 
            { return PRIMITIVE;
            } 
            // fall through
          case 154: break;
          case 77: 
            { return COMPILE_ERROR;
            } 
            // fall through
          case 155: break;
          case 78: 
            { return COMPILE_INTRINSIC;
            } 
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
