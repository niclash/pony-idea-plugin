/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.hedhman.pony.idea.generated.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.hedhman.pony.idea.generated.parsing.PonyTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_PonyLexer.flex</tt>
 */
public class _PonyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1"+
    "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77"+
    "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1"+
    "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110"+
    "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1"+
    "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13"+
    "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13"+
    "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1"+
    "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5"+
    "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1"+
    "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1"+
    "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13"+
    "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1"+
    "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170"+
    "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2"+
    "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1"+
    "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150"+
    "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2"+
    "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123"+
    "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207"+
    "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40"+
    "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46"+
    "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202"+
    "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13"+
    "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13"+
    "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1"+
    "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40"+
    "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27"+
    "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40"+
    "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4"+
    "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1"+
    "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13"+
    "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110"+
    "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250"+
    "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1"+
    "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256"+
    "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55"+
    "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1"+
    "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1"+
    "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1"+
    "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75"+
    "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265"+
    "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1"+
    "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1"+
    "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277"+
    "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13"+
    "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\23\1\2\22\0\1\3\1\74\1\25\1\64\1\0\1\73\1\77\1\22\1\4\1\65"+
    "\1\27\1\72\1\12\1\6\1\15\1\26\12\17\1\14\1\70\1\71\1\13\1\16\1\33\1\61\4\32"+
    "\1\20\25\32\1\5\1\11\1\10\1\75\1\30\1\0\1\46\1\43\1\50\1\60\1\21\1\40\1\63"+
    "\1\35\1\36\1\55\1\47\1\54\1\56\1\42\1\51\1\53\1\32\1\45\1\37\1\34\1\41\1\57"+
    "\1\44\1\62\1\52\1\32\1\66\1\76\1\67\1\7\6\0\1\24\12\0\1\1\11\0\1\31\12\0\1"+
    "\31\4\0\1\31\5\0\27\31\1\0\12\31\4\0\14\31\16\0\5\31\7\0\1\31\1\0\1\31\1\0"+
    "\5\31\1\0\2\31\2\0\4\31\1\0\1\31\6\0\1\31\1\0\3\31\1\0\1\31\1\0\4\31\1\0\23"+
    "\31\1\0\13\31\10\0\6\31\1\0\26\31\2\0\1\31\6\0\10\31\10\0\13\31\5\0\3\31\33"+
    "\0\6\31\1\0\1\31\17\0\2\31\7\0\2\31\12\0\3\31\2\0\2\31\1\0\16\31\15\0\11\31"+
    "\13\0\1\31\30\0\6\31\4\0\2\31\4\0\1\31\5\0\6\31\4\0\1\31\11\0\1\31\3\0\1\31"+
    "\7\0\11\31\7\0\5\31\1\0\10\31\6\0\26\31\3\0\1\31\2\0\1\31\7\0\11\31\4\0\10"+
    "\31\2\0\2\31\2\0\26\31\1\0\7\31\1\0\1\31\3\0\4\31\3\0\1\31\20\0\1\31\15\0"+
    "\2\31\1\0\1\31\5\0\6\31\4\0\2\31\1\0\2\31\1\0\2\31\1\0\2\31\17\0\4\31\1\0"+
    "\1\31\3\0\3\31\20\0\11\31\1\0\2\31\1\0\2\31\1\0\5\31\3\0\1\31\2\0\1\31\30"+
    "\0\1\31\13\0\10\31\2\0\1\31\3\0\1\31\1\0\6\31\3\0\3\31\1\0\4\31\3\0\2\31\1"+
    "\0\1\31\1\0\2\31\3\0\2\31\3\0\3\31\3\0\14\31\13\0\10\31\1\0\2\31\10\0\3\31"+
    "\5\0\1\31\4\0\10\31\1\0\6\31\1\0\5\31\3\0\1\31\3\0\2\31\15\0\13\31\2\0\1\31"+
    "\6\0\3\31\10\0\1\31\5\0\22\31\3\0\10\31\1\0\11\31\1\0\1\31\2\0\7\31\11\0\1"+
    "\31\1\0\2\31\15\0\2\31\1\0\1\31\2\0\2\31\1\0\1\31\2\0\1\31\6\0\4\31\1\0\7"+
    "\31\1\0\3\31\1\0\1\31\1\0\1\31\2\0\2\31\1\0\4\31\1\0\2\31\11\0\1\31\2\0\5"+
    "\31\1\0\1\31\25\0\14\31\1\0\24\31\13\0\5\31\22\0\7\31\4\0\4\31\3\0\1\31\3"+
    "\0\2\31\7\0\3\31\4\0\15\31\14\0\1\31\1\0\6\31\1\0\1\31\5\0\1\31\2\0\13\31"+
    "\1\0\15\31\1\0\4\31\2\0\7\31\1\0\1\31\1\0\4\31\2\0\1\31\1\0\4\31\2\0\7\31"+
    "\1\0\1\31\1\0\4\31\2\0\16\31\2\0\6\31\2\0\15\31\2\0\1\31\1\1\17\31\1\0\10"+
    "\31\7\0\15\31\1\0\6\31\23\0\1\31\4\0\1\31\3\0\5\31\2\0\22\31\1\0\1\31\5\0"+
    "\17\31\1\0\16\31\2\0\5\31\13\0\14\31\13\0\1\31\15\0\7\31\7\0\16\31\15\0\2"+
    "\31\11\0\4\31\1\0\4\31\3\0\2\31\11\0\10\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\6\31\1\0\7\31\1\0\1\31\3\0\3\31\1\0\7\31\3\0\4\31\2\0\6\31\4\0\13\1\15\0"+
    "\2\24\5\0\1\1\17\0\1\1\1\0\1\31\15\0\1\31\2\0\1\31\4\0\1\31\2\0\12\31\1\0"+
    "\1\31\3\0\5\31\6\0\1\31\1\0\1\31\1\0\1\31\1\0\4\31\1\0\13\31\2\0\4\31\5\0"+
    "\5\31\4\0\1\31\4\0\2\31\13\0\5\31\6\0\4\31\3\0\2\31\14\0\10\31\7\0\10\31\1"+
    "\0\7\31\1\0\1\1\4\0\2\31\12\0\5\31\5\0\2\31\3\0\7\31\6\0\3\31\12\0\2\31\13"+
    "\0\11\31\2\0\27\31\2\0\7\31\1\0\3\31\1\0\4\31\1\0\4\31\2\0\6\31\3\0\1\31\1"+
    "\0\1\31\2\0\5\31\1\0\12\31\12\0\5\31\1\0\3\31\1\0\10\31\4\0\7\31\3\0\1\31"+
    "\3\0\2\31\1\0\1\31\3\0\2\31\2\0\5\31\2\0\1\31\1\0\1\31\30\0\3\31\3\0\6\31"+
    "\2\0\6\31\2\0\6\31\11\0\7\31\4\0\5\31\3\0\5\31\5\0\1\31\1\0\10\31\1\0\5\31"+
    "\1\0\1\31\1\0\2\31\1\0\2\31\1\0\12\31\6\0\12\31\2\0\6\31\2\0\6\31\2\0\6\31"+
    "\2\0\3\31\3\0\14\31\1\0\16\31\1\0\2\31\1\0\2\31\1\0\10\31\6\0\4\31\4\0\16"+
    "\31\2\0\1\31\1\0\14\31\1\0\2\31\3\0\1\31\2\0\4\31\1\0\2\31\12\0\10\31\6\0"+
    "\6\31\1\0\3\31\1\0\12\31\3\0\1\31\12\0\4\31\25\0\1\31\1\0\1\31\3\0\7\31\1"+
    "\0\1\31\1\0\4\31\1\0\17\31\1\0\2\31\14\0\3\31\7\0\4\31\11\0\2\31\1\0\1\31"+
    "\20\0\4\31\10\0\1\31\13\0\10\31\5\0\3\31\2\0\1\31\2\0\2\31\2\0\4\31\1\0\14"+
    "\31\1\0\1\31\1\0\7\31\1\0\21\31\1\0\4\31\2\0\10\31\1\0\7\31\1\0\14\31\1\0"+
    "\4\31\1\0\5\31\1\0\1\31\3\0\14\31\2\0\10\31\1\0\2\31\1\0\1\31\2\0\1\31\1\0"+
    "\12\31\1\0\4\31\1\0\1\31\1\0\1\31\6\0\1\31\4\0\1\31\1\0\1\31\1\0\1\31\1\0"+
    "\3\31\1\0\2\31\1\0\1\31\2\0\1\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0\2"+
    "\31\1\0\1\31\2\0\4\31\1\0\7\31\1\0\4\31\1\0\4\31\1\0\1\31\1\0\12\31\1\0\5"+
    "\31\1\0\3\31\1\0\5\31\1\0\5\31");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\2\1\1\20\1\21\1\17\1\22\21\17\1\23\1\17"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\0\1\47\1\50\1\51\1\52"+
    "\2\53\1\0\4\17\2\0\1\54\2\0\1\55\1\56"+
    "\1\0\1\57\5\17\1\60\1\61\1\62\10\17\1\63"+
    "\5\17\1\64\6\17\1\65\5\17\1\66\1\67\1\17"+
    "\3\0\1\70\1\71\1\0\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\53\1\104"+
    "\3\17\1\0\4\17\1\105\1\17\1\106\1\107\2\17"+
    "\1\110\4\17\1\111\1\17\1\112\1\113\1\17\1\114"+
    "\1\115\1\17\1\116\4\17\1\117\2\17\1\120\7\17"+
    "\1\121\1\17\1\122\1\123\1\17\1\124\5\0\1\125"+
    "\1\0\1\126\1\127\1\130\1\17\1\131\1\17\1\132"+
    "\1\17\1\133\1\134\1\135\1\17\1\136\1\137\11\17"+
    "\1\140\15\17\3\0\1\141\1\0\1\142\1\143\1\17"+
    "\1\144\1\145\1\146\1\17\1\147\2\17\1\150\1\151"+
    "\1\152\1\153\1\154\3\17\1\155\4\17\1\156\2\17"+
    "\1\157\1\17\1\160\1\0\1\161\1\0\1\162\1\163"+
    "\1\17\1\164\1\165\1\17\1\166\4\17\1\167\2\17"+
    "\1\170\1\171\1\17\1\172\2\17\1\173\5\17\1\174"+
    "\2\17\1\175\1\176\1\177\2\17\1\200\6\17\1\201"+
    "\4\17\1\202";

  private static int [] zzUnpackAction() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\100\0\u0100\0\100"+
    "\0\100\0\100\0\100\0\u0140\0\100\0\u0180\0\u01c0\0\u0200"+
    "\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\100"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\100\0\100\0\100\0\100"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\100\0\100\0\100\0\100"+
    "\0\100\0\u0a00\0\100\0\100\0\u0a40\0\100\0\u0a80\0\100"+
    "\0\100\0\u0ac0\0\u0b00\0\u0b40\0\100\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u02c0\0\u0cc0\0\100\0\u0300\0\u0d00\0\100"+
    "\0\u0d40\0\u0d80\0\100\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0"+
    "\0\u1100\0\u1140\0\u1180\0\u0240\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u0240\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440"+
    "\0\u0240\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u0240\0\100"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\100\0\u16c0\0\u1700\0\u1740"+
    "\0\100\0\100\0\u1780\0\u17c0\0\100\0\100\0\100\0\100"+
    "\0\100\0\u0b80\0\u0240\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u0240\0\u1a00\0\u0240\0\u0240\0\u1a40"+
    "\0\u1a80\0\u0240\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u0240\0\u1bc0"+
    "\0\u0240\0\u0240\0\u1c00\0\u0240\0\u0240\0\u1c40\0\u0240\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u0240\0\u1d80\0\u1dc0\0\u0240\0\u1e00"+
    "\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u0240\0\u1fc0"+
    "\0\u0240\0\u0240\0\u2000\0\u0240\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\100\0\u2180\0\100\0\100\0\100\0\u21c0\0\u2200"+
    "\0\u2240\0\100\0\u2280\0\u0240\0\u0240\0\u0240\0\u22c0\0\u0240"+
    "\0\u0240\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u0240\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u28c0\0\u2900\0\100\0\u2940\0\100\0\u0240\0\u2980"+
    "\0\u0240\0\u0240\0\u0240\0\u29c0\0\u0240\0\u2a00\0\u2a40\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u0240\0\u2a80\0\u2ac0\0\u2b00\0\u0240"+
    "\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u0240\0\u2c40\0\u2c80\0\u0240"+
    "\0\u2cc0\0\100\0\u2d00\0\100\0\u2d40\0\u0240\0\u0240\0\u2d80"+
    "\0\u0240\0\u0240\0\u2dc0\0\u0240\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u0240\0\u2f00\0\u2f40\0\100\0\100\0\u2f80\0\u0240\0\u2fc0"+
    "\0\u3000\0\u0240\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u0240"+
    "\0\u3180\0\u31c0\0\u0240\0\u0240\0\u0240\0\u3200\0\u3240\0\u0240"+
    "\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u0240\0\u3400"+
    "\0\u3440\0\u3480\0\u34c0\0\u0240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\2\3\1\24\1\25\1\26\1\27"+
    "\2\21\1\30\1\31\1\21\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\21\1\43\1\44"+
    "\1\21\1\45\1\46\1\21\1\47\1\50\1\51\1\52"+
    "\1\53\1\21\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\101\0\3\3"+
    "\17\0\2\3\54\0\1\3\2\4\1\70\1\71\1\72"+
    "\14\0\1\4\1\3\62\0\1\73\6\0\1\74\74\0"+
    "\1\75\2\0\1\76\76\0\1\77\1\100\70\0\1\101"+
    "\3\0\1\102\2\0\1\103\76\0\1\104\1\0\1\20"+
    "\1\105\1\106\75\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\25\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\6\21\1\107\2\21\1\110\6\21"+
    "\1\111\1\21\1\112\2\21\1\0\2\21\14\0\11\113"+
    "\1\114\10\113\1\115\55\113\11\116\1\117\13\116\1\115"+
    "\52\116\7\0\1\120\16\0\1\121\1\122\57\0\1\123"+
    "\107\0\4\21\5\0\1\124\1\0\1\21\1\0\25\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\125\7\21\1\126\1\127\3\21\1\130"+
    "\6\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\3\21\1\131\1\132\1\21\1\133\16\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\1\134\24\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\5\21\1\135\4\21\1\136"+
    "\2\21\1\137\7\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\3\21\1\140\2\21\1\141"+
    "\16\21\1\0\2\21\33\0\2\21\1\142\1\21\5\0"+
    "\1\21\1\0\1\21\1\0\15\21\1\143\7\21\1\0"+
    "\2\21\33\0\2\21\1\144\1\21\5\0\1\21\1\0"+
    "\1\21\1\0\11\21\1\145\3\21\1\146\7\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\147\1\150\22\21\1\0\2\21\33\0\2\21"+
    "\1\151\1\21\5\0\1\21\1\0\1\21\1\0\25\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\3\21\1\152\2\21\1\153\5\21\1\154\7\21"+
    "\1\155\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\15\21\1\156\2\21\1\157\4\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\7\21\1\160\1\21\1\161\13\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\11\21\1\162"+
    "\13\21\1\0\2\21\33\0\2\21\1\163\1\21\5\0"+
    "\1\21\1\0\1\21\1\0\25\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\12\21\1\164"+
    "\12\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\12\21\1\165\12\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\2\21\1\166"+
    "\12\21\1\167\7\21\1\0\2\21\102\0\1\170\30\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\15\21\1\171"+
    "\7\21\1\0\2\21\53\0\1\172\5\0\1\173\1\174"+
    "\40\0\1\175\3\0\1\176\1\177\54\0\1\200\15\0"+
    "\1\201\77\0\1\202\63\0\1\203\17\0\1\204\73\0"+
    "\1\205\77\0\1\206\105\0\1\207\71\0\1\210\77\0"+
    "\1\211\107\0\1\104\1\105\1\106\75\0\1\212\77\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\24\21\1\213"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\11\21\1\214\13\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\3\21\1\215\21\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\7\21\1\216\15\21\1\0\2\21\14\0\2\113"+
    "\1\0\20\113\2\0\53\113\2\116\1\0\20\116\2\0"+
    "\53\116\2\121\1\0\20\121\2\0\53\121\27\122\1\217"+
    "\50\122\17\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\20\21\1\220\4\21\1\0\2\21\33\0\2\21\1\221"+
    "\1\21\5\0\1\21\1\0\1\21\1\0\2\21\1\222"+
    "\22\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\5\21\1\223\1\224\3\21\1\225\3\21"+
    "\1\226\6\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\25\21\1\0\1\21\1\227\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\17\21\1\230"+
    "\5\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\6\21\1\231\6\21\1\232\7\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\1\233\23\21\1\234\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\1\235\24\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\11\21"+
    "\1\236\13\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\6\21\1\237\16\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\20\21"+
    "\1\240\4\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\11\21\1\241\13\21\1\0\2\21"+
    "\33\0\2\21\1\242\1\21\5\0\1\21\1\0\1\21"+
    "\1\0\25\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\1\243\24\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\10\21\1\244"+
    "\14\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\1\245\24\21\1\0\2\21\33\0\2\21"+
    "\1\246\1\21\5\0\1\21\1\0\1\21\1\0\25\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\25\21\1\0\1\247\1\21\33\0\2\21\1\250"+
    "\1\21\5\0\1\21\1\0\1\21\1\0\2\21\1\251"+
    "\22\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\1\252\24\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\1\253\3\21\1\254"+
    "\7\21\1\255\2\21\1\256\5\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\24\21\1\257"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\1\260\24\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\24\21\1\261\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\6\21"+
    "\1\262\13\21\1\263\2\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\12\21\1\264\12\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\21\21\1\265\3\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\2\21\1\266\22\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\1\267\24\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\1\270\24\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\11\21"+
    "\1\271\6\21\1\272\4\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\25\21\1\0\1\21"+
    "\1\273\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\11\21\1\274\13\21\1\0\2\21\35\0\1\275\13\0"+
    "\1\276\63\0\1\277\120\0\1\300\11\0\1\301\32\0"+
    "\1\302\104\0\1\303\72\0\1\304\77\0\1\305\77\0"+
    "\1\306\107\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\15\21\1\307\7\21\1\0\2\21\33\0\2\21\1\310"+
    "\1\21\5\0\1\21\1\0\1\21\1\0\25\21\1\0"+
    "\2\21\33\0\2\21\1\311\1\21\5\0\1\21\1\0"+
    "\1\21\1\0\25\21\1\0\2\21\14\0\26\122\1\312"+
    "\1\217\50\122\17\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\15\21\1\313\7\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\6\21\1\314\16\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\3\21\1\315\21\21\1\0\2\21\33\0\2\21"+
    "\1\316\1\21\5\0\1\21\1\0\1\21\1\0\25\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\2\21\1\317\22\21\1\0\2\21\33\0\2\21"+
    "\1\320\1\21\5\0\1\21\1\0\1\21\1\0\25\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\1\321\24\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\16\21\1\322\6\21\1\0"+
    "\2\21\33\0\2\21\1\323\1\21\5\0\1\21\1\0"+
    "\1\21\1\0\25\21\1\0\2\21\33\0\2\21\1\324"+
    "\1\21\5\0\1\21\1\0\1\21\1\0\25\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\5\21\1\325\17\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\3\21\1\326\21\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\2\21\1\327\22\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\12\21\1\330\12\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\11\21\1\331\13\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\20\21\1\332\4\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\333\23\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\5\21\1\334\17\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\15\21\1\335\7\21\1\0\2\21\33\0\2\21\1\336"+
    "\1\21\5\0\1\21\1\0\1\21\1\0\25\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\15\21\1\337\7\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\11\21\1\340\13\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\1\341\2\21\1\342\21\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\17\21\1\343\5\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\3\21\1\344\21\21\1\0\2\21\33\0\2\21"+
    "\1\345\1\21\5\0\1\21\1\0\1\21\1\0\25\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\22\21\1\346\2\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\14\21\1\347\10\21"+
    "\1\0\2\21\33\0\2\21\1\350\1\21\5\0\1\21"+
    "\1\0\1\21\1\0\25\21\1\0\2\21\56\0\1\351"+
    "\103\0\1\352\77\0\1\353\103\0\1\354\63\0\1\355"+
    "\54\0\1\356\103\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\11\21\1\357\13\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\2\21\1\360\22\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\24\21\1\361\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\14\21\1\362\10\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\1\363\24\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\17\21\1\364\5\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\4\21"+
    "\1\365\20\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\11\21\1\366\13\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\14\21"+
    "\1\367\10\21\1\0\2\21\33\0\2\21\1\370\1\21"+
    "\5\0\1\21\1\0\1\21\1\0\25\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\20\21"+
    "\1\371\4\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\13\21\1\372\11\21\1\0\2\21"+
    "\33\0\2\21\1\373\1\21\5\0\1\21\1\0\1\21"+
    "\1\0\25\21\1\0\2\21\33\0\2\21\1\374\1\21"+
    "\5\0\1\21\1\0\1\21\1\0\25\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\11\21"+
    "\1\375\13\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\23\21\1\376\1\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\12\21"+
    "\1\377\12\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\11\21\1\u0100\13\21\1\0\2\21"+
    "\33\0\2\21\1\u0101\1\21\5\0\1\21\1\0\1\21"+
    "\1\0\25\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\2\21\1\u0102\22\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\5\21"+
    "\1\u0103\17\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\2\21\1\u0104\22\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\3\21"+
    "\1\u0105\21\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\14\21\1\u0106\10\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\2\21"+
    "\1\u0107\22\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\u0108\23\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\3\21"+
    "\1\u0109\21\21\1\0\2\21\74\0\1\u010a\64\0\1\u010b"+
    "\112\0\1\u010c\65\0\1\u010d\50\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\4\21\1\u010e\20\21\1\0\2\21"+
    "\33\0\2\21\1\u010f\1\21\5\0\1\21\1\0\1\21"+
    "\1\0\25\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\4\21\1\u0110\20\21\1\0\2\21"+
    "\33\0\4\21\5\0\1\21\1\0\1\21\1\0\1\u0111"+
    "\24\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\6\21\1\u0112\16\21\1\0\2\21\33\0"+
    "\2\21\1\u0113\1\21\5\0\1\21\1\0\1\21\1\0"+
    "\25\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\1\u0114\24\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\3\21\1\u0115\21\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\6\21\1\u0116\16\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\22\21\1\u0117\2\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\20\21\1\u0118\4\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\1\u0119\24\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\1\u011a\24\21\1\0\2\21\33\0\4\21\5\0\1\21"+
    "\1\0\1\21\1\0\1\u011b\24\21\1\0\2\21\35\0"+
    "\1\u011c\115\0\1\u011d\57\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\12\21\1\u011e\12\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\11\21\1\u011f"+
    "\13\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\3\21\1\u0120\21\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\5\21\1\u0121"+
    "\17\21\1\0\2\21\33\0\2\21\1\u0122\1\21\5\0"+
    "\1\21\1\0\1\21\1\0\25\21\1\0\2\21\33\0"+
    "\2\21\1\u0123\1\21\5\0\1\21\1\0\1\21\1\0"+
    "\25\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\2\21\1\u0124\22\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\15\21\1\u0125"+
    "\7\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\14\21\1\u0126\10\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\15\21\1\u0127"+
    "\7\21\1\0\2\21\33\0\2\21\1\u0128\1\21\5\0"+
    "\1\21\1\0\1\21\1\0\25\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\u0129\1\0\1\21\1\0\25\21\1\0"+
    "\2\21\33\0\4\21\5\0\1\21\1\0\1\21\1\0"+
    "\23\21\1\u012a\1\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\4\21\1\u012b\20\21\1\0"+
    "\2\21\33\0\2\21\1\u012c\1\21\5\0\1\21\1\0"+
    "\1\21\1\0\25\21\1\0\2\21\33\0\4\21\5\0"+
    "\1\21\1\0\1\21\1\0\4\21\1\u012d\20\21\1\0"+
    "\2\21\33\0\2\21\1\u012e\1\21\5\0\1\21\1\0"+
    "\1\21\1\0\2\21\1\u012f\22\21\1\0\2\21\33\0"+
    "\2\21\1\u0130\1\21\5\0\1\21\1\0\1\21\1\0"+
    "\25\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\11\21\1\u0131\13\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\6\21\1\u0132"+
    "\16\21\1\0\2\21\33\0\4\21\5\0\1\21\1\0"+
    "\1\21\1\0\11\21\1\u0133\13\21\1\0\2\21\33\0"+
    "\4\21\5\0\1\21\1\0\1\21\1\0\1\u0134\24\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\15\21\1\u0135\7\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\11\21\1\u0136\13\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\11\21\1\u0137\13\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\2\21\1\u0138\22\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\6\21\1\u0139\16\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\3\21\1\u013a\21\21"+
    "\1\0\2\21\33\0\4\21\5\0\1\21\1\0\1\21"+
    "\1\0\2\21\1\u013b\22\21\1\0\2\21\33\0\4\21"+
    "\5\0\1\21\1\0\1\21\1\0\14\21\1\u013c\10\21"+
    "\1\0\2\21\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\4\11\1\1\1\11"+
    "\12\1\1\11\24\1\4\11\4\1\5\11\1\1\2\11"+
    "\1\1\1\11\1\0\2\11\3\1\1\11\1\0\4\1"+
    "\2\0\1\11\2\0\1\11\1\1\1\0\1\11\44\1"+
    "\1\11\1\1\3\0\1\11\1\1\1\0\1\1\2\11"+
    "\2\1\5\11\5\1\1\0\55\1\5\0\1\11\1\0"+
    "\3\11\3\1\1\11\36\1\3\0\1\11\1\0\1\11"+
    "\33\1\1\11\1\0\1\11\1\0\16\1\2\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[316];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _PonyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PonyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 131: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 132: break;
          case 3: 
            { return LPAREN;
            } 
            // fall through
          case 133: break;
          case 4: 
            { return LSQUARE;
            } 
            // fall through
          case 134: break;
          case 5: 
            { return MINUS_OP;
            } 
            // fall through
          case 135: break;
          case 6: 
            { return PARTIAL_OP;
            } 
            // fall through
          case 136: break;
          case 7: 
            { return RSQUARE;
            } 
            // fall through
          case 137: break;
          case 8: 
            { return BACKSLASH;
            } 
            // fall through
          case 138: break;
          case 9: 
            { return COMMA;
            } 
            // fall through
          case 139: break;
          case 10: 
            { return ASSIGN;
            } 
            // fall through
          case 140: break;
          case 11: 
            { return TYPE_OP;
            } 
            // fall through
          case 141: break;
          case 12: 
            { return CALL_OP;
            } 
            // fall through
          case 142: break;
          case 13: 
            { return GTE_OP;
            } 
            // fall through
          case 143: break;
          case 14: 
            { return NUMBER;
            } 
            // fall through
          case 144: break;
          case 15: 
            { return ID;
            } 
            // fall through
          case 145: break;
          case 16: 
            { return DIV_OP;
            } 
            // fall through
          case 146: break;
          case 17: 
            { return MULT_OP;
            } 
            // fall through
          case 147: break;
          case 18: 
            { return THROWS;
            } 
            // fall through
          case 148: break;
          case 19: 
            { return FFI_CHAR;
            } 
            // fall through
          case 149: break;
          case 20: 
            { return HASH;
            } 
            // fall through
          case 150: break;
          case 21: 
            { return RPAREN;
            } 
            // fall through
          case 151: break;
          case 22: 
            { return LBRACE;
            } 
            // fall through
          case 152: break;
          case 23: 
            { return RBRACE;
            } 
            // fall through
          case 153: break;
          case 24: 
            { return LIST_OP;
            } 
            // fall through
          case 154: break;
          case 25: 
            { return LT_OP;
            } 
            // fall through
          case 155: break;
          case 26: 
            { return PLUS_OP;
            } 
            // fall through
          case 156: break;
          case 27: 
            { return REMAINDER;
            } 
            // fall through
          case 157: break;
          case 28: 
            { return BANG;
            } 
            // fall through
          case 158: break;
          case 29: 
            { return HAT;
            } 
            // fall through
          case 159: break;
          case 30: 
            { return PIPE_OP;
            } 
            // fall through
          case 160: break;
          case 31: 
            { return ISECT_OP;
            } 
            // fall through
          case 161: break;
          case 32: 
            { return LPAREN_NEW;
            } 
            // fall through
          case 162: break;
          case 33: 
            { return LSQUARE_NEW;
            } 
            // fall through
          case 163: break;
          case 34: 
            { return MINUS_NEW;
            } 
            // fall through
          case 164: break;
          case 35: 
            { return MINUS_TILDE;
            } 
            // fall through
          case 165: break;
          case 36: 
            { return CAP_ARROW;
            } 
            // fall through
          case 166: break;
          case 37: 
            { return EQUALITY;
            } 
            // fall through
          case 167: break;
          case 38: 
            { return ARROW;
            } 
            // fall through
          case 168: break;
          case 39: 
            { return CHAIN_OP;
            } 
            // fall through
          case 169: break;
          case 40: 
            { return GTE_UNSAFE;
            } 
            // fall through
          case 170: break;
          case 41: 
            { return GT_OP;
            } 
            // fall through
          case 171: break;
          case 42: 
            { return RSHIFT;
            } 
            // fall through
          case 172: break;
          case 43: 
            { return FLOAT;
            } 
            // fall through
          case 173: break;
          case 44: 
            { return STRING;
            } 
            // fall through
          case 174: break;
          case 45: 
            { return DIV_UNSAFE;
            } 
            // fall through
          case 175: break;
          case 46: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 176: break;
          case 47: 
            { return MULT_UNSAFE;
            } 
            // fall through
          case 177: break;
          case 48: 
            { return IS;
            } 
            // fall through
          case 178: break;
          case 49: 
            { return IF;
            } 
            // fall through
          case 179: break;
          case 50: 
            { return IN;
            } 
            // fall through
          case 180: break;
          case 51: 
            { return BE;
            } 
            // fall through
          case 181: break;
          case 52: 
            { return AS;
            } 
            // fall through
          case 182: break;
          case 53: 
            { return OR;
            } 
            // fall through
          case 183: break;
          case 54: 
            { return DO;
            } 
            // fall through
          case 184: break;
          case 55: 
            { return ATLBRACE;
            } 
            // fall through
          case 185: break;
          case 56: 
            { return LT_UNSAFE;
            } 
            // fall through
          case 186: break;
          case 57: 
            { return LTE_OP;
            } 
            // fall through
          case 187: break;
          case 58: 
            { return LSHIFT;
            } 
            // fall through
          case 188: break;
          case 59: 
            { return PLUS_UNSAFE;
            } 
            // fall through
          case 189: break;
          case 60: 
            { return REMAINDER_UNSAFE;
            } 
            // fall through
          case 190: break;
          case 61: 
            { return MODULO;
            } 
            // fall through
          case 191: break;
          case 62: 
            { return NON_EQUALITY;
            } 
            // fall through
          case 192: break;
          case 63: 
            { return MINUS_TILDE_NEW;
            } 
            // fall through
          case 193: break;
          case 64: 
            { return EQUALITY_UNSAFE;
            } 
            // fall through
          case 194: break;
          case 65: 
            { return THREE_DOTS;
            } 
            // fall through
          case 195: break;
          case 66: 
            { return GT_UNSAFE;
            } 
            // fall through
          case 196: break;
          case 67: 
            { return RSHIFT_UNSAFE;
            } 
            // fall through
          case 197: break;
          case 68: 
            { return END;
            } 
            // fall through
          case 198: break;
          case 69: 
            { return TRN;
            } 
            // fall through
          case 199: break;
          case 70: 
            { return TRY;
            } 
            // fall through
          case 200: break;
          case 71: 
            { return TAG;
            } 
            // fall through
          case 201: break;
          case 72: 
            { return ISO;
            } 
            // fall through
          case 202: break;
          case 73: 
            { return FUN;
            } 
            // fall through
          case 203: break;
          case 74: 
            { return FOR;
            } 
            // fall through
          case 204: break;
          case 75: 
            { return USE;
            } 
            // fall through
          case 205: break;
          case 76: 
            { return NEW;
            } 
            // fall through
          case 206: break;
          case 77: 
            { return NOT;
            } 
            // fall through
          case 207: break;
          case 78: 
            { return BOX;
            } 
            // fall through
          case 208: break;
          case 79: 
            { return REF;
            } 
            // fall through
          case 209: break;
          case 80: 
            { return AND;
            } 
            // fall through
          case 210: break;
          case 81: 
            { return LET;
            } 
            // fall through
          case 211: break;
          case 82: 
            { return VAR;
            } 
            // fall through
          case 212: break;
          case 83: 
            { return VAL;
            } 
            // fall through
          case 213: break;
          case 84: 
            { return XOR;
            } 
            // fall through
          case 214: break;
          case 85: 
            { return LTE_UNSAFE;
            } 
            // fall through
          case 215: break;
          case 86: 
            { return LSHIFT_UNSAFE;
            } 
            // fall through
          case 216: break;
          case 87: 
            { return MODULO_UNSAFE;
            } 
            // fall through
          case 217: break;
          case 88: 
            { return NON_EQUALITY_UNSAFE;
            } 
            // fall through
          case 218: break;
          case 89: 
            { return ELSE;
            } 
            // fall through
          case 219: break;
          case 90: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 220: break;
          case 91: 
            { return THEN;
            } 
            // fall through
          case 221: break;
          case 92: 
            { return THIS;
            } 
            // fall through
          case 222: break;
          case 93: 
            { return TRUE;
            } 
            // fall through
          case 223: break;
          case 94: 
            { return TYPE;
            } 
            // fall through
          case 224: break;
          case 95: 
            { return ISNT;
            } 
            // fall through
          case 225: break;
          case 96: 
            { return WITH;
            } 
            // fall through
          case 226: break;
          case 97: 
            { return HASH_ANY;
            } 
            // fall through
          case 227: break;
          case 98: 
            { return TYPE_EQ;
            } 
            // fall through
          case 228: break;
          case 99: 
            { return ERROR;
            } 
            // fall through
          case 229: break;
          case 100: 
            { return EMBED;
            } 
            // fall through
          case 230: break;
          case 101: 
            { return LOC;
            } 
            // fall through
          case 231: break;
          case 102: 
            { return TRAIT;
            } 
            // fall through
          case 232: break;
          case 103: 
            { return IFDEF;
            } 
            // fall through
          case 233: break;
          case 104: 
            { return FALSE;
            } 
            // fall through
          case 234: break;
          case 105: 
            { return UNTIL;
            } 
            // fall through
          case 235: break;
          case 106: 
            { return BREAK;
            } 
            // fall through
          case 236: break;
          case 107: 
            { return WHERE;
            } 
            // fall through
          case 237: break;
          case 108: 
            { return WHILE;
            } 
            // fall through
          case 238: break;
          case 109: 
            { return ACTOR;
            } 
            // fall through
          case 239: break;
          case 110: 
            { return CLASS;
            } 
            // fall through
          case 240: break;
          case 111: 
            { return MATCH;
            } 
            // fall through
          case 241: break;
          case 112: 
            { return HASH_SEND;
            } 
            // fall through
          case 242: break;
          case 113: 
            { return HASH_READ;
            } 
            // fall through
          case 243: break;
          case 114: 
            { return ELSEIF;
            } 
            // fall through
          case 244: break;
          case 115: 
            { return IFTYPE;
            } 
            // fall through
          case 245: break;
          case 116: 
            { return STRUCT;
            } 
            // fall through
          case 246: break;
          case 117: 
            { return RETURN;
            } 
            // fall through
          case 247: break;
          case 118: 
            { return REPEAT;
            } 
            // fall through
          case 248: break;
          case 119: 
            { return OBJECT;
            } 
            // fall through
          case 249: break;
          case 120: 
            { return HASH_SHARE;
            } 
            // fall through
          case 250: break;
          case 121: 
            { return HASH_ALIAS;
            } 
            // fall through
          case 251: break;
          case 122: 
            { return RECOVER;
            } 
            // fall through
          case 252: break;
          case 123: 
            { return CONSUME;
            } 
            // fall through
          case 253: break;
          case 124: 
            { return CONTINUE;
            } 
            // fall through
          case 254: break;
          case 125: 
            { return DIGESTOF;
            } 
            // fall through
          case 255: break;
          case 126: 
            { return INTERFACE;
            } 
            // fall through
          case 256: break;
          case 127: 
            { return ADDRESSOF;
            } 
            // fall through
          case 257: break;
          case 128: 
            { return PRIMITIVE;
            } 
            // fall through
          case 258: break;
          case 129: 
            { return COMPILE_ERROR;
            } 
            // fall through
          case 259: break;
          case 130: 
            { return COMPILE_INTRINSIC;
            } 
            // fall through
          case 260: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
